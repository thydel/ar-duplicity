---

- include_vars: secret.yml


- name: secret - ensure requested dir exists

  file:
    path: '{{ paths.etc }}'
    state: directory
    mode: 0700


- name: secret - see if password file exits
  register: key

  stat: { path: '{{ secret.key }}' }


- { import_tasks: include/install.yml, vars: { list: [ apg ] }}
- { import_tasks: include/installed.yml, vars: { name: apg }}

- name: secret - generate a password
  when: key.stat.exists == False and 'apg' in installed
  register: apg
  changed_when: False
  check_mode: False

  command: apg -n 1
    

- name: secret - save generated password
  when: not apg|skipped

  copy:
    content: '{{ apg.stdout }}'
    dest: '{{ secret.key }}'
    mode: 0400


- name: secret - generate ssh key pair

  command: ssh-keygen -N '' -f {{ secret.ssh.key }} -C {{ secret.ssh.name }}
  args: { creates: '{{ secret.ssh.key }}' }
    

- name: secret - avoid mercurial leak for secret dir
  register: hgignore

  lineinfile:
    dest: /etc/.hgignore
    line: '{{ name }}'
    create: True


- name: secret - commit hgignore changes
  when: hgignore.changed

  command: hg --cwd /etc com -Am "{{ 'Via ansible - do not commit ' + name + ' in etc' }}"


- name: secret - get public key

  fetch:
    src: '{{ secret.ssh.key }}.pub'
    dest: '{{ fetched }}/'
    fail_on_missing: True
    flat: True


- name: secret - did we fetch key
  register: pubkey
  delegate_to: localhost

  stat:
    path: '{{ secret.ssh.fetched_pub_key }}'


- name: secret - add public key to backup host
  when: pubkey.stat.exists == True
  delegate_to: '{{ backup }}'

  authorized_key:
    user: '{{ name }}'
    key: |
      {{ lookup('file', secret.ssh.fetched_pub_key) }}
